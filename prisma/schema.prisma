// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole{
  ADMIN
  USER
  COACH
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  Coach         Coach?
  role          UserRole @default(USER)
  accounts      Account[]
  requests      Request[]
  notebooks     Notebook[]
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

enum CoachType{
  COMMUNITY
  PROFESSIONAL
}

enum CoachCertStatus{
  APPROVED
  PENDING
  REJECTED
}

model Coach {
  id               String             @id @default(cuid())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id])
  areaOfExpertise  String[]           @default(["general"])
  coachType        CoachType          @default(COMMUNITY)
  rate             Float
  certification    String[]           @default([])
  introduction     String?
  video            String?
  certified        Boolean           @default(false)
  coachCertStatus  CoachCertStatus?
  requests         Request[]
  notebooks        Notebook[]
}

model Request{
  id String @id @default(cuid())
  requestorId     String
  coachId         String            
  message         String?
  requestStatus   RequestStatus?
  rejectionReason String?
  requestor       User        @relation(fields: [requestorId], references: [id])
  coach           Coach       @relation(fields: [coachId], references: [id])

  @@unique([requestorId,coachId])
}

enum RequestStatus{
  APPROVED
  PENDING
  REJECTED
}

model Notebook{
  id              String @id @default(cuid())
  coachId         String
  clientId        String
  client          User        @relation(fields: [clientId], references: [id])
  coach           Coach       @relation(fields: [coachId], references: [id])
  entry           NotebookEntry[]

  @@unique([clientId,coachId])
}

model NotebookEntry{
  id              String @id @default(cuid())
  notebookId      String
  datetime        DateTime @default(now())
  content         Json
  clientVisibility Boolean @default(false)    
  notebook        Notebook @relation(fields: [notebookId], references: [id])
}



enum ContentType{
  MDX
  TXT
  excalidraw
}

model Journal{
  id  String @id @default(cuid())
  authorId String
  entry JournalEntry[]
}



model JournalEntry{
  id  String @id @default(cuid())
  journalId String
  datetime  DateTime @default(now())
  content   String
  visibility JEntryVisibility?
  journal Journal @relation(fields: [journalId], references: [id])
}

enum JEntryVisibility{
  PRIVATE
  PUBLIC
  COACH
}